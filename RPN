import java.util.Scanner;

class StackNode {
    public StackNode(double data, StackNode underneath) {
        this.data = data;
        this.underneath = underneath;
    }

    public double data;
    public StackNode underneath;
}

class RPN {
    public void into(double newData) {
        //Remove redundant variable, replace with inline variable
        top = new StackNode(newData, top);
    }

    //Correct typo in word
    public double outOf() {
        double topData = top.data;
        top = top.underneath;
        return topData;
    }

    public RPN(String command) {
        top = null;
        this.command = command;
    }

    public double get() {
        double a;
        double b;
        int j;

    for(int i = 0; i < command.length(); i++) {
        // if it's a digit
        if (Character.isDigit(command.charAt(i))) {
              double number;

    // get a string of the number
    StringBuilder temp = new StringBuilder();
    for(j = 0; (j < 100) && (Character.isDigit(command.charAt(i)) || (command.charAt(i) == '.')); j++, i++) {
        //Convert variable to stringBuilder, remove unnecessary string.valueOf() call, replace with command.charAt(i)
        temp.append(command.charAt(i));
        }

        // convert to double and add to the stack
        number = Double.parseDouble(temp.toString());
        into(number);
        } else if(command.charAt(i) == '+') {
          b = outOf( );
          a = outOf( );
          into(a + b);

        } else if(command.charAt(i) == '-') {
          b = outOf( );
          a = outOf( );
          into(a - b);

        } else if(command.charAt(i) == '*') {
          b = outOf( );
          a = outOf( );
          into(a * b);

        } else if(command.charAt(i) == '/') {
          b = outOf( );
          a = outOf( );
          into(a / b);
        }
        else if(command.charAt(i) == '^') {
          b = outOf( );
          a = outOf( );
          into(Math.pow(a, b));

        } else if(command.charAt(i) != ' ') {
             throw new IllegalArgumentException( );
        }
    }

        double val = outOf();

        if(top != null) {
            throw new IllegalArgumentException();
        }
        return val;
    }

    //Make command final
    private final String command;
    private StackNode top;

    /* main method */
    //Replace with java style array declaration
public static void main(String[] args) {
    while(true) {
        Scanner in = new Scanner(System.in);
        System.out.println("Enter RPN expression or q to \"quit\".");
        String line = in.nextLine();
        //Simplify the quit option
        if(line.equals("q")) {
            break;
        } else {
          RPN calc = new RPN(line);
          System.out.printf("Answer is %f\n", calc.get());
        }
      }
   }
}
